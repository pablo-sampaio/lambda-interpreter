// 
// Exemplos de listas e funções de alta ordem sobre listas
// http://www.cse.unsw.edu.au/~en1000/haskell/hof.html
// 

DECLARATIONS

    zero  := \lambda f, x . x 
    succ  := \lambda num, f, x . f(num(f,x))
    pred  := \lambda num, f, x . num (\lambda g, h. h(g(f))) (\lambda u . x) (\lambda u. u) 

    one   := succ(zero)
    two   := succ(one)
    three := succ(two)
    four  := succ(three)

    add  := \lambda n, m, f, x . n( f, m(f,x) )
    sub  := \lambda n, m . m(pred,n)
    mult := \lambda n, m, f . n(m(f))
    
    true  := \lambda x, y . x
    false := \lambda x, y . y

    is-zero := \lambda num . num(\lambda z . false, true)
    less-eq := \lambda n, m . is-zero(sub(n,m))

    if-then-else := \lambda b, e1, e2. b(e1,e2)

    pair   := \lambda x, y, f . f(x, y) 
    first  := \lambda p . p(true) 
    second := \lambda p . p(false) 
    
    nil    := \lambda x . true 
    is-nil := \lambda p . p (\lambda x, y . false) 

    compose   := \lambda f1, f2, x . f1(f2(x)) 

    y-combinator := \lambda g . (\lambda x . g(x(x))) (\lambda y . g(y(y)))
    
    filter    := y-combinator
                 (  \lambda flter, predicate, list .
                    if-then-else ( is-nil(list) )
                    (  nil  )
                    (  if-then-else ( predicate(first(list)) )
                       (  pair( first(list), flter(predicate, second(list)) )  )
                       (  flter(predicate, second(list))  )
                    )
                 )
 
    foldr     := y-combinator
                 (  \lambda fold, func, z, list .
                    if-then-else ( is-nil(list) )
                    (  z  )
                    (  func( first(list), fold(func, z, second(list)) )
                    )
                 )
 
 	map  := \lambda func, list . foldr(compose(pair,func), nil, list)
 
    add-all   := foldr(add,zero)
    mult-all  := foldr(mult,one)

    num-list  := pair(two, pair(four, pair(three, pair(one, nil))))

BODY

    //filter(less-eq(three), num-list)
    map(add(three),num-list)
    //add-all(num-list)

